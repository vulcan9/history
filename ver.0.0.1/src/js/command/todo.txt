/*////////////////////////////////////////////////////////////////////////////////

    * 
    * Developer : (c) Dong-il Park (pdi1066@naver.com)
    * Project : HI-STORY (https://github.com/vulcan9/history)
    * Description : Command 구현 시나리오

////////////////////////////////////////////////////////////////////////////////*/


* 프로젝트에 URL로 직접 접근한 경우

        [로그인 한 상태]
         - 편집 툴, 편집 전환 버튼 보임 (프레젠테이션모드 전환)
         - 프레젠테이션모드, 편집 버튼 보임

        [로그인 안한 상태]
        - 프레젠테이션모드, 편집 버튼 감춤(편집 안됨)

* 프로젝트 관리화면에서 접속한 경우

        [로그인 한 상태]
         - 프레젠테이션모드, 편집 버튼 보임

        [로그인 안한 상태]
        - 로그인 화면

프레젠테이션 모드에서 편집화면으로 진입한다.

좀더 생각해 보기..............


- Undo/Redo 기능은 Document 레벨에서 개별 관리한다.
- Project에 대한 History는 없다.


Undo(Document)
Redo(Document)

AddDocument
RemoveDocument
ModifyDocument

AddElement
RemoveElement
ModifyElement



////////////////////////////////////////
// 초기화
////////////////////////////////////////

            // 저장 성공 여부 기록
            this._saveSuccessed = undefined;

            // 로드완료 체크 timeout 간격 (20초)
            this._loadTimeoutInterval = 20000;

            // 함수 호출 관리 (Command Process 관리)
            this._process = new ProcessQueue();
            //processAdd, processNext, processCancel, _checkProcess

            // 화면 보호 관리 protectON, protectOFF
            // Notice, Toast
            
            // 로드 완료 flag 초기화
            loadingON, loadingOFF
            this._initReadyState();

            // View 인스턴스 생성

            // 새로운 데이터 구조 생성하기
            this.initProject();
            // 저장된 이후로 데이터가 변경되었는지를 체크
            this._dataChanged = false;
            
            // 최종 랜더링 확인
            this.addResizeEvent();
            this.render();

            // 닫기 상태로 초기화 완료
            this.closeProject();

////////////////////////////////////////
// 데이터
////////////////////////////////////////

        // View 로부터 이벤트를 청취해 Model을 변경한다.
        // Model이 변경되면 Model을 모니터링 하고 있는 view가 자동으로 업데이트 하도록 한다.

        // ItemModel 추가
        addItem: function(itemModel) : this.itemCollection.add(itemModel);

        // Item Model 삭제
        removeItem: function(itemModel) : itemModel.destroy();

        status 값 변경됨
        statusChangedItem: function(data)
        data.model.set({status:status});
        this.itemCollection.trigger("statusChangedItem", data.model);

        property 값 변경됨
        propertyChangedItem: function(data)
        model.set(properties);
        this.itemCollection.trigger("propertyChangedItem", data.model);

        // ItemCollection 데이터 비우기
        removeAllItem: function()

        // Project Model 변경
        setProject: function (data)
        // ProjectModel 내용이 바뀔때
        _onProjectModelChanged: function(projectModel)

        // ItemCollection 이벤트
        onAddItem: function(itemModel)
        onRemoveItem: function(itemModel)
        onChangeItem: function(itemModel)
        onSortItem: function(collection)

        // ItemCollection Custom 이벤트
        // 아이템 상태가 변경될때
        onStatusChangedItem: function(itemModel)
        // 아이템 속성이 변경될때
        onPropertyChangedItem: function(itemModel)
        // 리스트가 초기화 될때
        onRemoveAll: function()

////////////////////////////////////////
// CloseCommand : 문서 닫기
////////////////////////////////////////



        _closeExecute: function(closeCallback){

            this.protectON(현재 문서를 닫습니다.);
            
            this._checkSave(function(data){
                
                if(data == "cancel"){
                    closeCallback.apply(self, [data]);
                    self.processCancel();
                    return;
                }
                
                // 모두 초기화
                self.viewInitialize();
                
                // Close 작업 종료
                closeCallback.apply(self, [data]);
            });
        },


        // 저장이 필요한 상태인지 확인
        _checkSave: function(saveCallback){
            
            this._saveSuccessed = undefined;
            
            // 닫기 상태였다면 저장 체크하지 않음
            if(this._state === state.READY){
                callback("no");
                return;
            }
            
            // save 체크
            var self = this;
            if(this._dataChanged){
                저장되지 않은 데이터가 있습니다. 저장하시겠습니까?
                u.confirm( callback);
            }else{
                callback("no");
            }
            
            function callback(data){
                
                if(data == "yes")
                {
                    //*********************************
                    // 저장하기 과정에서 processAdd 함수는 사용하면 안됨
                    // 의도한 바와 다르게 실행순서가 정해질 수 있음
                    //*********************************
                    
                    self.processAdd(self.savePopupOpen, [], self);
                    self.processAdd(saveCallback, [data], self);
                    self.processNext();
                    
                }else{
                    saveCallback.apply(self, [data]);
                }
            }
        },

////////////////////////////////////////
// NewCommand : 새문서
////////////////////////////////////////

        newProject: function(projectModel){
            
            this.protectON(새로운 문서를 준비중입니다.);
            
            // itemCollection 갱신 - 뷰 자동으로 초기화됨
            this.removeAllItem();
            
            // 로드 완료 flag 초기화, 다른 속성도 초기화
            this._initReadyState();
            
            this.initProject(projectModel);
        },

////////////////////////////////////////
// SaveCommand : 저장 하기
////////////////////////////////////////

        save: function(data){
            
            this.protectON(문서를 저장중입니다.);
            
            if(data === undefined){
                data = this.projectModel;
            }
            
            this._saveSuccessed = undefined;
            
            //out('# save : ', data);
            var saver = new Save({
                projectModel: data,
                
                // 열기의 경우
                syncInfo:this._syncInfo,

                // 새로 만들기의 경우
                bookInfo:this._bookInfo,
                videoInfo:this._videoInfo
            });
            
            saver.execute(function (success, errMsg){
                out('# save end : ', success);
                self._saveSuccessed = success;
                
                if (success) {
                    callback("yes");
                    return;
                }
                
                문서 저장에 실패하였습니다.
                
                if (self._process.size() !== 0) {
                    u.confirm(계속 진행 하시겠습니까?, callback);
                } else {
                    u.alert(다시 시도하여 주십시요., callback);
                }
                
                function callback(confirmData) {
                    if (confirmData === "yes"){
                        
                        var saveAndExit = window._VIEW_CONFIG["saveAndExit"];
                        if(saveAndExit == "Y" || saveAndExit == undefined){
                            // 프로그램 종료
                            self.exit(true);
                        }else{
                            self._checkProcess();
                        }
                        
                    }else{
                        self.processCancel();
                    }
                }
            });
        },

////////////////////////////////////////
// OpenCommand : 불러오기
////////////////////////////////////////

        open: function(pathOrContent){
            
            this.protectON(문서를 불러오는 중입니다.);
            
            if(typeof pathOrContent == "string")
            {
                out("// OPEN : 파일 경로를 ID로 전달 받은 경우임");
                var id = pathOrContent;
                var service = new CicService();
                service.getSyncContentURL(id, this._getSyncContentURL, this);
            }
            else
            {
                out("// OPEN : 파일 경로를 ID 대신 JSON 데이터로 직접 전달 받은 경우임");
                var content = pathOrContent;
                this._openCallback(true, content);
            }
        },

        _openCallback: function (success, result){
            
            if (!success) {
                
                문서를 불러올 수 없습니다.
                this.closeProject();
                return;
            }

            // 로드 완료 flag 초기화
            this._initReadyState(ready);
            
            // Project 데이터 적용
            var projectModel = new ProjectModel();
            this.initProject(projectModel);
            projectModel.setProject(result["PROJECT"]);
            
            // ID 채워 넣기 (갱신)
            var id = result["filePath"];
            if(id){
                this.setProject({
                    "PATH":id,
                });
            }
            
            out("projectModel >: ", projectModel.attributes);
            
            // player및 book이 로드 완료되었는지 체크한다.
            // player에서 duration이 설정되어야 정상적인 위치에 anchor가 표시된다.

            // 로드 완료를 기다림
            this._loadCompleteTimeout();
            
            function ready(){
                out("# Item 데이터 불러오기");
                var itemList = result["ITEM"];
                var len = itemList.length;
                for(var i=0; i<len; ++i)
                {
                    var config = itemList[i];
                    var itemModel = new ItemModel();
                    itemModel.setSyncRange({max:this.playerView.getDuration()});
                    itemModel.set(config);
                    this.addItem(itemModel);
                }
                
                out('# open end : ', success, this.projectModel.attributes);
            }
        },
        

////////////////////////////////////////
// SaveAsCommand
////////////////////////////////////////





////////////////////////////////////////
// ExitCommand
////////////////////////////////////////

        // 종료 버튼에 의한 EXIT
        _callExit: function(data){

            u.confirm(프로그램을 종료 하시겠습니까?
                    function callback(data){
                        // "yes" "no" "cancel"
                        if(data !== "yes"){
                            this.processCancel();
                            return;
                        }
                        
                        // 저장 체크
                        this._checkSave(saveResult);
                    }, this);
            
            
            function saveResult(data){
                if(self._savePopupCanceled){
                    self._savePopupCanceled = false;
                    data = "cancel";
                }
                
                // "cancel"
                if(data == "cancel"){
                    self.processCancel();
                    return;
                }
                
                // "yes"
                if(data == "yes"){
                    // 저장 과정이 진행된 케이스 - 확인창 후 종료
                    self.exit(true);
                    return;
                }
                
                // "no"
                if(data == "no"){
                    self.exit(false);
                    return;
                }
            };
        },

        exit: function(isSaveProcess){
            var self = this;
            if(isSaveProcess){
                if(this._saveSuccessed === undefined){
                    
                }else if(this._saveSuccessed){
                    u.alert(저장이 완료되었습니다. 프로그램을 종료합니다., exitExecute);
                }else{
                    // 저장 실패 - 이미 안내 팝업창이 떴음
                    u.confirm(정말로 종료 하시겠습니까?,
                        function (data){
                            // "yes" "no" "cancel"
                            if(data !== "yes"){
                                self.processCancel();
                                return;
                            }
                            
                            exitExecute.apply(self);
                        }, this);
                }
            }else{
                // 저장 과정을 생략하고 종료
                exitExecute.apply(self);
            }
            
            function exitExecute(){
                var isWindow = false;
                if(isWindow){
                    window.open("about:blank","_self").close();
                    return;
                }
                
                // EXIT 호출 : 레이어 팝업인 경우
                self.closeProject();
                
                if(window.parent && window.parent.exitSyncTool){
                    window.parent.exitSyncTool();
                }else if(window.opener && window.opener.exitSyncTool){
                    window.opener.exitSyncTool();
                }else{
                    alert("iframe의 parent에 'exitSyncTool' 함수를 구현해 주세요.");
                }
            }
            
        },
        






















